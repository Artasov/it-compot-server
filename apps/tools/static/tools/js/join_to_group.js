import Client from "../../../../static/Core/js/classes/Client.js";

const errorModal = new bootstrap.Modal(document.getElementById('errorModal'), {
    keyboard: true
});
const successModal = new bootstrap.Modal(document.getElementById('successModal'), {
    keyboard: true
});
const confirmationModal = new bootstrap.Modal(document.getElementById('confirmationModal'), {
    keyboard: false
});
const nothingFitModal = new bootstrap.Modal(document.getElementById('nothingFitModal'), {
    keyboard: false
});
const chooseTZModal = new bootstrap.Modal(document.getElementById('chooseTZModal'), {
    backdrop: 'static',
    keyboard: false
});

function hideAllModals() {
    successModal.hide();
    confirmationModal.hide();
    nothingFitModal.hide();
}

async function getAvailableFormingGroups() {
    try {
        return await Client.sendGet(
            Client.getProtocolAndDomain() +
            '/api/v1/tools/get_forming_groups_for_join/',
            Client.getParamsFromCurrentURL()
        );
    } catch (error) {
        raiseErrorModal(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`);
        return null;
    }
}

function raiseErrorModal(error) {
    hideAllModals();
    document.querySelector('.error-modal-body').textContent = error;
    document.querySelector('#group_join_content').classList.add('d-none');
    errorModal.show();
}

function raiseSuccessModal(title, subtitle, contentElement) {
    hideAllModals();

    const successTitleEl = document.querySelector('#successModal .modal-title');
    successTitleEl.innerHTML = title;

    if (subtitle !== null) {
        const successSubTitleEl = document.querySelector('#successModal .modal-subtitle');
        successSubTitleEl.innerHTML = subtitle;
    }
    const successModalBodyEl = document.querySelector('.success-modal-body');
    if (contentElement !== null) {
        successModalBodyEl.innerHTML = '';
        successModalBodyEl.appendChild(contentElement);

        document.querySelector('.success-modal-body').appendChild(contentElement)
    } else {
        successTitleEl.parentElement.classList.add('border-0');
        successModalBodyEl.classList.add('pt-0');
    }

    document.querySelector('#group_join_content').classList.add('d-none');
    successModal.show();
}

async function postJoinStudentToGroup(student_id, group_id, TZ) {
    try {
        return await Client.sendPost(
            Client.getProtocolAndDomain() +
            '/api/v1/tools/student_to_forming_group/',
            {
                'student_id': student_id,
                'group_id': group_id,
                'client_tz': TZ
            }
        );
    } catch (error) {
        raiseErrorModal(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`);
        return null;
    }
}

async function getIsStudentOnDiscipline() {
    try {
        return await Client.sendGet(
            Client.getProtocolAndDomain() +
            '/api/v1/tools/get_is_student_in_group_on_discipline/',
            {
                'discipline': Client.getParamsFromCurrentURL()['discipline'],
                'student_id': Client.getParamsFromCurrentURL()['student_id'],
            }
        );
    } catch (error) {
        raiseErrorModal(`–û—à–∏–±–∫–∞ –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`);
        return null;
    }
}

function joinStudentToGroup(student_id, group, TZ) {
    postJoinStudentToGroup(student_id, group['Id'], TZ).then(response => {

        confirmationModal.hide();
        document.getElementById('confirmationModal').classList.remove('show');

        if (response.success) {
            const groupPreview = createGroupEl(group, TZ);
            groupPreview.classList.remove('bg-primary');
            groupPreview.classList.add('bg-success', 'pointer-events-none', 'fs-5');
            raiseSuccessModal(
                '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ',
                '–°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å üòâ',
                groupPreview
            )
        } else {
            raiseErrorModal('–ü–æ—Ö–æ–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.')
        }
    })
}


function createDateFromString(dateTimeString) {
    // –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ '2024-03-23 19:40'
    const parts = dateTimeString.split(' ');
    const dateParts = parts[0].split('-');
    const timeParts = parts[1].split(':');
    return new Date(dateParts[0], dateParts[1] - 1, dateParts[2], timeParts[0], timeParts[1]);
}

function adjustDateHours(date, hoursChange) {
    const newDate = new Date(date); // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç
    newDate.setHours(newDate.getHours() + hoursChange);
    return newDate;
}

function createGroupEl(group, TZ) {
    const li = document.createElement('li');
    li.className = "unit-item rounded-3 text-light bg-primary";

    const dateP = document.createElement('p');
    dateP.classList.add('fw-bold', 'fs-5', 'frsc', 'gap-2');
    const schedule = group.ScheduleItems[0];

    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ TZ
    const moscowTZ = 3; // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è +3
    const diff = TZ - moscowTZ;
    const datetimeStart = adjustDateHours(
        createDateFromString(`${schedule.BeginDate} ${schedule.BeginTime}`),
        diff
    );
    const datetimeEnd = adjustDateHours(
        createDateFromString(`${schedule.BeginDate} ${schedule.EndTime}`),
        diff
    );
    const day = datetimeStart.getDate().toString().padStart(2, '0');
    const month = (datetimeStart.getMonth() + 1).toString().padStart(2, '0'); // –º–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
    const startHours = datetimeStart.getHours().toString().padStart(2, '0');
    const startMinutes = datetimeStart.getMinutes().toString().padStart(2, '0');
    const endHours = datetimeEnd.getHours().toString().padStart(2, '0');
    const endMinutes = datetimeEnd.getMinutes().toString().padStart(2, '0');

    dateP.innerHTML = `
        <div class="frcc gap-2">
            <span class="bg-primary-05 rounded-2 px-2" style="padding-top: 0.1em;">
                ${day}.${month}
            </span>
            <span class="bg-primary-05 rounded-2 px-2 fw-normal fs-6" style="padding-top: 0.1em;">
                ${startHours}:${startMinutes} - ${endHours}:${endMinutes}
            </span>
        </div>
    `;
    li.appendChild(dateP);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—á–µ–Ω–∏–∫–æ–≤ –∏ –≤–∞–∫–∞–Ω—Å–∏—è—Ö
    const frbDiv = document.createElement('div');
    frbDiv.className = "d-flex gap-2";
    const studentsSpan = document.createElement('span');
    studentsSpan.classList.add('fw-bold');
    studentsSpan.textContent = '–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: ';
    const vacanciesSpan = document.createElement('span');
    const vacancies_count = parseInt(group.Vacancies);
    vacanciesSpan.textContent = `${vacancies_count}`;
    frbDiv.appendChild(studentsSpan);
    frbDiv.appendChild(vacanciesSpan);
    li.appendChild(frbDiv);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
    const teacherP = document.createElement('p');
    teacherP.classList.add('fw-bold');
    teacherP.innerHTML = `–ü–µ–¥–∞–≥–æ–≥: <br><span class="fw-normal">${schedule.Teacher}</span>`;
    li.appendChild(teacherP);

    return li;
}

async function send_nothing_fit(student_id, msg) {
    try {
        return await Client.sendPost(
            Client.getProtocolAndDomain() +
            '/api/v1/tools/send_nothing_fit/',
            {
                'student_id': student_id,
                'msg': msg
            }
        );
    } catch (error) {
        raiseErrorModal(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`);
        return null;
    }
}


let loadedGroups = undefined;
const resultContainerEl = document.querySelector('.result_container');
const groupLoadingStatusContainerEl = document.querySelector('.group_loading_status_container');

function showGroupsWithTZ(TZ) {
    // TZ - —Ü–∏—Ñ—Ä–∞ (–¥–∞–Ω–Ω—ã–µ –≤ –≥—Ä—É–ø–ø–∞—Ö —É–∫–∞–∑–∞–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ +3)
    // –Ω–∞–ø—Ä–∏–º–µ—Ä -1 +1 +3 +2 –∏ —Ç–æ–º—É –ø–æ–¥–æ–±–Ω—ã–µ —Ü–∏—Ñ—Ä—ã.
    // –ú–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ, —Ç–∞–∫ –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ.
    for (const group of loadedGroups) {
        const groupEl = createGroupEl(group, TZ)
        groupEl.addEventListener('click', () => {
            const studentId = Client.getParamsFromCurrentURL()['student_id'];
            confirmationModal.show();

            const modalBodyEl = document.querySelector('.confirmation-modal-body');
            modalBodyEl.innerHTML = '';
            const groupPreview = createGroupEl(group, TZ);
            groupPreview.classList.add('pointer-events-none', 'fs-5');
            const submitQuestionText = document.createElement('p');
            submitQuestionText.className = 'text-center mb-0 mt-2 fs-5';
            submitQuestionText.innerHTML = '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É?';
            modalBodyEl.appendChild(groupPreview);
            modalBodyEl.appendChild(submitQuestionText);


            document.getElementById('confirmJoin').onclick = () => {
                document.getElementById('confirmSpinner').classList.remove('d-none')
                joinStudentToGroup(studentId, group, TZ);
                document.getElementById('confirmJoin').setAttribute('disabled', 'true');
            };
        });
        resultContainerEl.appendChild(groupEl);
    }
    document.getElementById('btn-nothing-fit').classList.remove('d-none');
    resultContainerEl.parentElement.classList.remove('d-none');
    groupLoadingStatusContainerEl.innerHTML = '';
    groupLoadingStatusContainerEl.className = '';
    const successEl = document.createElement('p');
    successEl.className = 'text-center fw-bold fs-5 m-0 opacity-75';
    successEl.style.color = '#4058ff'
    successEl.innerHTML = '–ì–æ—Ç–æ–≤–æ! –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –Ω–∏–∂–µ.';
    groupLoadingStatusContainerEl.appendChild(successEl);
}


async function main() {
    // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
    if (Object.keys(Client.getParamsFromCurrentURL()).length !== 4) {
        raiseErrorModal(`–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.`);
        return;
    }
    // –°–≤—è–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞ –æ–± —ç—Ç–æ–º
    const formNothingFit = document.getElementById('form-nothing_fit');
    formNothingFit.addEventListener('submit', (e) => {
        e.preventDefault();
        const submitButton = document.getElementById('btn-nothing-fit-submit');
        const msg = document.getElementById('nothing_fit_user_textarea').value;

        submitButton.disabled = true;

        send_nothing_fit(Client.getParamsFromCurrentURL()['student_id'], msg)
            .then(data => {
                console.log(data)
                if (data) {
                    raiseSuccessModal(
                        '–û—Ç–ª–∏—á–Ω–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä üòâ',
                        null, null
                    )
                }
            })
    })
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å —É—á–µ–Ω–∏–∫ —É–∂–µ —É—á–∏—Ç—Å—è –ø–æ —ç—Ç–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ
    const alreadyStudying = await getIsStudentOnDiscipline()
    if (alreadyStudying) {
        raiseErrorModal(`–£—á–µ–Ω–∏–∫ —É–∂–µ –µ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ –ø–æ –¥–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`);
        return;
    } else if (alreadyStudying === null) return;

    // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã
    getAvailableFormingGroups().then(groups => {
        if (groups.length === 0) {
            document.getElementById('nothing_fit_user_textarea').setAttribute(
                'placeholder',
                '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Å–º–æ–≥–ª–∞ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É. ' +
                '–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–º –¥–Ω–∏ –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è, –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è üôÇ')
            nothingFitModal.show();
            groupLoadingStatusContainerEl.innerHTML = '';
            return;

        }
        loadedGroups = groups
        const btnsChooseTz = document.getElementsByClassName('btn-choose-tz');
        for (const btnTz of btnsChooseTz) {
            btnTz.addEventListener('click', () => {
                chooseTZModal.hide();
                document.getElementById('tz-info').classList.remove('d-none');
                const tzByMoscow = parseInt(btnTz.value) - 3;
                document.getElementById('tz-span').innerHTML = tzByMoscow < 0 ? `${tzByMoscow}` : `+${tzByMoscow}`;
                showGroupsWithTZ(parseInt(btnTz.value));
            })
        }
        const btnChangeTz = document.getElementById('btn-change-tz');
        btnChangeTz.addEventListener('click', () => {
            resultContainerEl.innerHTML = '';
            chooseTZModal.show();
        })
        chooseTZModal.show();
    });

}

await main();


