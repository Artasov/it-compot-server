version: '3.8'

services:
  nginx:
    build:
      context: .
      dockerfile: Dockerfile
      target: nginx
    image: nginx:latest
    ports:
      - "80:80"
    depends_on:
      - web
    networks:
      - net
#  nginx:
#    image: nginx:alpine
#    ports:
#      - "80:80"
#    depends_on:
#      web:
#        condition: service_healthy
#    volumes:
#      - ./nginx.conf:/etc/nginx/conf.d/default.conf
#      - ../static:/static
#      - ../media:/media
#    networks:
#      - net

  postgres:
    hostname: postgres
    image: postgres:alpine
    restart: always
    environment:
      - POSTGRES_DB=${SQL_DATABASE_NAME}
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
      - POSTGRES_PORT=${SQL_PORT}
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres/:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${SQL_USER} -d ${SQL_DATABASE_NAME} -h localhost" ]
      # interval: 30s
      timeout: 5s
      retries: 10
      start_period: 5s
    networks:
      - net

  redis:
    hostname: redis
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      # interval: 60s
      timeout: 5s
      retries: 10
      start_period: 5s
    networks:
      - net

  web:
    hostname: web
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DEV=${DEV}
      - SITE_ID=${SITE_ID}
      - SQL_HOST=${SQL_HOST}
      - MAIN_DOMAIN=${MAIN_DOMAIN}
      - HTTPS=${HTTPS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SQL_ENGINE=${SQL_ENGINE}
      - SQL_DATABASE_NAME=${SQL_DATABASE_NAME}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${SQL_PASSWORD}
      - SQL_PORT=${SQL_PORT}
      - REDIS_URL=${REDIS_URL}
      - REDIS_CACHE_URL=${REDIS_URL}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - TZ=${TZ}
    volumes:
      - ./:/srv
      - ../static:/static
      - ../media:/media
    ports:
      - "8000:8000"
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8000/health_test/ || exit 1" ]
      # interval: 30s
      timeout: 5s
      retries: 10
      start_period: 5s
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - net


networks:
  net:
    driver: bridge
