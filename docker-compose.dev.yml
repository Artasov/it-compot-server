version: '3.8'

services:

  nginx:
    container_name: nginx
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      web:
        condition: service_healthy
    volumes:
      #      - ./nginx.nossl.conf:/etc/nginx/conf.d/default.conf
      - ./nginx.dev.conf:/etc/nginx/conf.d/default.conf
      - ./ssl/ssl.crt:/etc/nginx/ssl/ssl.crt
      - ./ssl/ssl.key:/etc/nginx/ssl/ssl.key
    networks:
      - net

  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:alpine
    restart: always
    environment:
      - POSTGRES_DB=${SQL_DATABASE_NAME}
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
      - POSTGRES_PORT=${SQL_PORT}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres/:/var/lib/postgresql/data
      - ./pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${SQL_USER} -d ${SQL_DATABASE_NAME} -h localhost" ]
      # interval: 30s
      timeout: 5s
      retries: 10
      start_period: 5s
    networks:
      - net

  redis:
    container_name: redis
    user: 1000:1001
    # sudo adduser username
    # id -u username
    # id -g username
    hostname: redis
    image: redis:alpine
    restart: always
    volumes:
      - ./data/redis/:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      timeout: 5s
      retries: 10
      start_period: 5s
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      - net
    cap_add:
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined

  web:
    container_name: web
    hostname: web
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    environment:
      - LOG_PREFIX=server
    volumes:
      - ./data:/srv/data
      - ./logs:/srv/logs
      - ../static:/static
      - ../media:/media
    ports:
      - "8000:8000"
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8000/health_test/ || exit 1" ]
      # interval: 30s
      timeout: 30s
      retries: 10
      start_period: 5s
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - net
    cap_add:
      - SYS_TIME

  celery:
    container_name: celery
    user: "1000:1000"
    hostname: celery
    build:
      context: .
      dockerfile: Dockerfile
      target: celery
    volumes:
      - ./data:/srv/data
      - ./logs:/srv/logs
      - ./entrypoint_celery.sh:/srv/entrypoint_celery.sh
    links:
      - redis
    environment:
      - LOG_PREFIX=celery
    depends_on:
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    networks:
      - net

  minio:
    container_name: minio
    hostname: minio
    image: minio/minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address :9001
    volumes:
      - ./data/minio/data:/data
      - ./data/minio/config:/root/.minio
    #      - ./ssl/ssl.crt:/root/.minio/certs/public.crt
    #      - ./ssl/ssl.key:/root/.minio/certs/private.key
    networks:
      - net
    healthcheck:
      test: [ "CMD", "echo", "'MinIO is up'" ]
      interval: 10s
      timeout: 4s
      retries: 10
      start_period: 5s

networks:
  net:
    driver: bridge
