version: '3.8'

services:

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      web:
        condition: service_healthy
    volumes:
      #      - ./nginx.nossl.conf:/etc/nginx/conf.d/default.conf
      - ./nginx.dev.conf:/etc/nginx/conf.d/default.conf
      - ./ssl/ssl.crt:/etc/nginx/ssl/ssl.crt
      - ./ssl/ssl.key:/etc/nginx/ssl/ssl.key
    networks:
      - net

  postgres:
    hostname: postgres
    image: postgres:alpine
    restart: always
    environment:
      - POSTGRES_DB=${SQL_DATABASE_NAME}
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
      - POSTGRES_PORT=${SQL_PORT}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres/:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${SQL_USER} -d ${SQL_DATABASE_NAME} -h localhost" ]
      # interval: 30s
      timeout: 5s
      retries: 10
      start_period: 5s
    networks:
      - net

  redis:
    hostname: redis
    image: redis:alpine
    restart: always
    volumes:
      - ./data/redis/:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      # interval: 60s
      timeout: 5s
      retries: 10
      start_period: 5s
    networks:
      - net

  web:
    hostname: web
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    environment:
      - DEBUG=${DEBUG}
      - DEV=${DEV}
      - HTTPS=${HTTPS}
      - MAIN_DOMAIN=${MAIN_DOMAIN}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - HOLLIHOP_DOMAIN=${HOLLIHOP_DOMAIN}
      - HOLLIHOP_AUTHKEY=${HOLLIHOP_AUTHKEY}
      - REDIS_CACHE_URL=${REDIS_URL}
      - REDIS_URL=${REDIS_URL}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_EXTERNAL_ENDPOINT_USE_HTTPS=${MINIO_EXTERNAL_ENDPOINT_USE_HTTPS}
      - MINIO_USE_HTTPS=${MINIO_USE_HTTPS}
      - GSDOCID_TEACHERS_SALARY=${GSDOCID_TEACHERS_SALARY}
      - GSDOCID_LOG_JOIN_FORMING_GROUPS=${GSDOCID_LOG_JOIN_FORMING_GROUPS}
      - GSCREDS_FILE_NAME=${GSCREDS_FILE_NAME}
      - TZ=${TZ}
      - SECRET_KEY=${SECRET_KEY}
      - SITE_ID=${SITE_ID}
      - SQL_HOST=${SQL_HOST}
      - SQL_ENGINE=${SQL_ENGINE}
      - SQL_DATABASE_NAME=${SQL_DATABASE_NAME}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${SQL_PASSWORD}
      - SQL_PORT=${SQL_PORT}

      - LOG_PREFIX=server
    volumes:
      - ./data:/data
      - ./logs:/srv/logs
      - ../static:/static
      - ../media:/media
    ports:
      - "8000:8000"
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8000/health_test/ || exit 1" ]
      # interval: 30s
      timeout: 30s
      retries: 10
      start_period: 5s
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - net
    cap_add:
      - SYS_TIME

  #  celery:
  #    user: "1000:1000"
  #    hostname: celery
  #    build:
  #      context: .
  #      dockerfile: DockerfileCelery
  #    volumes:
  #      - ./data:/srv/data
  #      - ./logs:/srv/logs
  #      - ./entrypoint_celery.sh:/srv/entrypoint_celery.sh
  #    links:
  #      - redis
  #    environment:
  #      - DEBUG=${DEBUG}
  #      - DEV=${DEV}
  #      - HTTPS=${HTTPS}
  #      - MAIN_DOMAIN=${MAIN_DOMAIN}
  #      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
  #      - HOLLIHOP_DOMAIN=${HOLLIHOP_DOMAIN}
  #      - HOLLIHOP_AUTHKEY=${HOLLIHOP_AUTHKEY}
  #      - REDIS_CACHE_URL=${REDIS_URL}
  #      - REDIS_URL=${REDIS_URL}
  #      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
  #      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
  #      - MINIO_EXTERNAL_ENDPOINT_USE_HTTPS=${MINIO_EXTERNAL_ENDPOINT_USE_HTTPS}
  #      - MINIO_USE_HTTPS=${MINIO_USE_HTTPS}
  #      - GSDOCID_TEACHERS_SALARY=${GSDOCID_TEACHERS_SALARY}
  #      - GSDOCID_LOG_JOIN_FORMING_GROUPS=${GSDOCID_LOG_JOIN_FORMING_GROUPS}
  #      - GSCREDS_FILE_NAME=${GSCREDS_FILE_NAME}
  #      - TZ=${TZ}
  #      - SECRET_KEY=${SECRET_KEY}
  #      - SITE_ID=${SITE_ID}
  #      - SQL_HOST=${SQL_HOST}
  #      - SQL_ENGINE=${SQL_ENGINE}
  #      - SQL_DATABASE_NAME=${SQL_DATABASE_NAME}
  #      - SQL_USER=${SQL_USER}
  #      - SQL_PASSWORD=${SQL_PASSWORD}
  #      - SQL_PORT=${SQL_PORT}
  #
  #      - LOG_PREFIX=celery
  #    #      - CELERY_BROKER_URL=${REDIS_URL}
  #    #      - CELERY_RESULT_BACKEND=${REDIS_URL}
  #    #      - CELERY_ACCEPT_CONTENT=application/json
  #    #      - CELERY_TASK_SERIALIZER=json
  #    #      - CELERY_RESULT_SERIALIZER=json
  #    depends_on:
  #      redis:
  #        condition: service_healthy
  #      web:
  #        condition: service_healthy
  #    networks:
  #      - net

  minio:
    hostname: minio
    image: minio/minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address :9001
    volumes:
      - ./data/minio/data:/data
      - ./data/minio/config:/root/.minio
    #      - ./ssl/ssl.crt:/root/.minio/certs/public.crt
    #      - ./ssl/ssl.key:/root/.minio/certs/private.key
    networks:
      - net
    healthcheck:
      test: [ "CMD", "echo", "'MinIO is up'" ]
      interval: 10s
      timeout: 4s
      retries: 10
      start_period: 5s

networks:
  net:
    driver: bridge
